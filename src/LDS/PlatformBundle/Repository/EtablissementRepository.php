<?php

namespace LDS\PlatformBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * EtablissementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtablissementRepository extends \Doctrine\ORM\EntityRepository
{

  public function count_siret($siret) {
    $query=$this->createQueryBuilder('a')
    ->select('COUNT(a.siret)')
    ->where('a.siret = :siret')
    ->setParameters(['siret'=> $siret])->getQuery()->getSingleScalarResult();

    if ($query == 1) {
      return true;
    }
    else {
      return false;
    }
  }
  
   public function liste_etblissement_pro($login) {
    $query=$this->createQueryBuilder('a')
    ->select('a.*')
    ->where('a.proprietaire = :login')
    ->setParameters(['login'=> $login])->getQuery()->getResult();
    return $query;
  }

     public function listeEtablissementValide($pro) {
    $query=$this->createQueryBuilder('a')
    ->select('a')
    ->where('a.proprietaire = :pro')
    ->andWhere('a.valide = true')
    ->orderBy('a.nomEtablissement', 'asc')
    ->setParameters(['pro'=> $pro])->getQuery()->getResult();
    return $query;
  }

      public function listeEtablissementNonValide($pro) {
    $query=$this->createQueryBuilder('a')
    ->select('a')
    ->where('a.proprietaire = :pro')
    ->andWhere('a.valide = false')
    ->orderBy('a.nomEtablissement', 'asc')
    ->setParameters(['pro'=> $pro])->getQuery()->getResult();
    return $query;
  }

    public function trouverEtablissementNonValide ($page = 1, $max)
{
    $qb = $this->createQueryBuilder('a')
            ->where('a.valide = false')
            ->orderBy('a.nomEtablissement', 'ASC');
    $query = $qb->getQuery();
$query->setFirstResult(($page-1) * $max)
->setMaxResults($max);
return new Paginator($query);
}

   public function meilleursEtablissements() {
    $query=$this->createQueryBuilder('a')
    ->select('a')
    ->where('a.valide = true')
    ->andWhere('a.moyenne > :note')
    ->orderBy('a.coefficient', 'desc')
    ->setMaxResults(6)
    ->setParameters(['note'=> 2.5])
    ->getQuery()->getResult();
    return $query;
  }


  public function countEtablissementNonValide() {
    $query=$this->createQueryBuilder('a')
    ->select('COUNT(a.id)')
    ->where('a.valide = false')
    ->getQuery()->getSingleScalarResult();
    if ($query == 0) {
      return true;
    }
    else {
      return false;
    }
  }

     public function autocompletionNom($data) {
    $query=$this->createQueryBuilder('a')
    ->select('a')
    ->where('a.nomEtablissement like :data')
    ->orderBy('a.nomEtablissement', 'asc')
    ->setMaxResults(6)
    ->distinct()
    ->setParameters(['data'=>'%' . $data . '%'])
    ->getQuery()->getResult();
    return $query;
  }

       public function trouverParNom($data) {
    $query=$this->createQueryBuilder('a')
    ->select('a')
    ->where('a.nomEtablissement like :data')
    ->andWhere('a.valide = true')
    ->orderBy('a.nomEtablissement', 'asc')
    ->setParameters(['data'=>'%' . $data . '%'])
    ->getQuery()->getResult();
    return $query;
  }

    public function trouverParNomPagination($data, $page =1, $max) {
    $query=$this->createQueryBuilder('a')
    ->select('a')
    ->where('a.nomEtablissement like :data')
    ->andWhere('a.valide = true')
    ->orderBy('a.nomEtablissement', 'asc')
    ->setParameters(['data'=>'%' . $data . '%'])
    ->getQuery();
    $query->setFirstResult(($page-1) * $max)
->setMaxResults($max);
return new Paginator($query);
  }
}
